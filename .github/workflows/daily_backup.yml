# Este flujo de trabajo automatiza el backup diario del proyecto GC-2 en Supabase.
name: Supabase Daily Backup GC-2

# Se ejecuta todos los días a las 23:59 (hora UTC) y se puede activar manualmente.
on:
  schedule:
    - cron: '59 23 * * *'
  workflow_dispatch:

# Permisos para el repositorio.
permissions:
  contents: read

jobs:
  gc2_backup_job:
    runs-on: ubuntu-latest
    steps:
      # Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Instalar la CLI de Supabase de la manera más robusta
      - name: Install Supabase CLI
        run: |
          # Define la versión de la CLI de Supabase a usar
          CLI_VERSION="1.46.0"
          # Define el sistema operativo del runner de GitHub Actions
          OS=$(uname | tr '[:upper:]' '[:lower:]')
          # Define la arquitectura del runner
          ARCH="amd64"

          # Descarga el archivo comprimido de la CLI
          curl -sL https://github.com/supabase/cli/releases/download/v$CLI_VERSION/supabase_${OS}_$ARCH.tar.gz -o supabase.tar.gz
          
          # Extrae el binario del archivo comprimido
          tar -xzf supabase.tar.gz
          
          # Mueve el binario a una ubicación local de usuario que no requiere sudo
          mkdir -p ~/.local/bin
          mv supabase ~/.local/bin/
          
          # Agrega el directorio local al PATH para que el comando 'supabase' funcione
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Limpia el archivo comprimido
          rm supabase.tar.gz

          # Verifica que la instalación haya sido exitosa
          supabase --version
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      # Descargar el backup de la base de datos de GC-2 usando pg_dump directamente
      - name: Dump GC-2 database
        run: |
          # Instalar el cliente de PostgreSQL para usar el comando pg_dump
          sudo apt-get update && sudo apt-get install -y postgresql-client

          # Construir la URL de conexión completa para pg_dump
          # El flag --hostaddr fuerza a pg_dump a usar IPv4
          DB_URL="postgresql://postgres:${{ secrets.SUPABASE_DB_PASSWORD }}@db.${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co:5432/postgres"

          # Ejecutar pg_dump directamente con el flag PGHOSTADDR para forzar IPv4
          PGHOSTADDR=$(dig +short A db.${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co | head -1) \
          pg_dump \
            --dbname="$DB_URL" \
            --data-only \
            -f gc2-backup-$(date +'%Y-%m-%d').sql
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      # Configurar la clave SSH para Hostinger
      - name: Setup SSH key for Hostinger
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}

      # Transferir el backup y limpiar archivos viejos en Hostinger
      - name: Transfer and cleanup GC-2 backups on Hostinger
        run: |
          BACKUP_FILE=gc2-backup-$(date +'%Y-%m-%d').sql
          rsync -avz \
            -e "ssh -p 65002 -o StrictHostKeyChecking=no" \
            $BACKUP_FILE \
            ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_HOST }}:/home/${{ secrets.HOSTINGER_SSH_USER }}/public_html/Backups/

          ssh -p 65002 -o StrictHostKeyChecking=no ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
            cd /home/${{ secrets.HOSTINGER_SSH_USER }}/public_html/Backups/
            # Eliminar solo los backups de GC-2 de mas de 7 dias
            find . -name "gc2-backup-*.sql" -mtime +7 -delete
            echo "Limpieza de backups de GC-2 completada."
          EOF
